{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentary Watch","text":"<p>DelphineLemire/documentary-watch</p> <p>License : GPLv3</p> <p>Documentation</p>"},{"location":"#why","title":"Why?","text":"<p>It is a tool for organize my documentary watch . When I read posts website,  sometimes, I would like to read other old posts on the same topic but I can't find them.  This tool should allow me to keep an overview on a given subject. This project is for my personal use but I share on public repository as a portfolio's project. </p>"},{"location":"#on-the-technical-side","title":"On the technical side","text":"<p>As a developer, I like to focus on features that are of value to my clients, so I rely on existing  tools that already implement a number of useful features for websites and their deployment.</p>"},{"location":"#django","title":"Django","text":"<p>I chose to rely on the django framework, an opensource project, with a large community,  providing generic functionalities to any web application.  For example, with django , I can quickly develop info admin screens and the notions of authentication  and access rights are natively made available.</p>"},{"location":"#poetry","title":"Poetry","text":"<p>I was inspired by cookiecutter-poetry to adapt the  project to the poetry package manager.</p> <p>I chose poetry because in terms of virtual environment management, it seems very successful to me;  limits omissions, and facilitates additions, updates, deletions of packages. </p> <p>I chose ruff recommended by the cookiecutter-poetry project as a code quality control tool, because it includes a large  number of tools, in particular the versions of flake8 and it integrates perfectly with poetry.</p> <p>Do not hesitate to comment to improve it. </p>"},{"location":"DEVELOP/","title":"Develop","text":""},{"location":"DEVELOP/#code-of-conduct","title":"Code of conduct","text":"<p>As a developer, my intention is to stick to the standards and follow the documentation of the tools in order to promote  a quick start for a new person on the subject and to promote teamwork.</p> <ul> <li>favor atomic commit</li> <li>do not circumvent the operation of a tool without documenting it and especially without good reason.</li> <li>don't forget to remove links to private repositories</li> </ul>"},{"location":"DEVELOP/#application-architecture","title":"Application architecture","text":"<p>This application uses Django's framework. Please get closer to the documentation for the handling of this project.</p>"},{"location":"DEVELOP/#substituting-a-custom-user-model","title":"Substituting a custom User Model","text":"<p>This project replaces the user model with its own model.</p>"},{"location":"DEVELOP/#backend","title":"Backend","text":"<p>This project uses the default Django's admin </p>"},{"location":"DEVELOP/#api","title":"Api","text":"<p>[TODO]</p>"},{"location":"DEVELOP/#frontend","title":"Frontend","text":"<p>This project uses Framework CSS Bulma and Vanilla Javascript. In a first time, It uses Bulma's cdn link.</p> <p>[IN PROGRESS]</p>"},{"location":"DEVELOP/#internationalization","title":"Internationalization","text":"<p>This project is translated into 2 languages; english and french. </p> <p>Make sure that a locale/fr/LC_MESSAGES directory is present in the directory of each of your applications</p> <p>In order to generate translation file po </p> <pre><code>python manage.py makemessages --all\n</code></pre> <p>After populated translated sentences, you must made to generate file mo, used to translate website</p> <pre><code>python manage.py compilemessages\n</code></pre>"},{"location":"DEVELOP/#code-quality","title":"Code Quality","text":"<p>This project uses a pre commit hook, but you can use next command to control code's quality</p> <pre><code>make check\n</code></pre>"},{"location":"DEVELOP/#documentation","title":"Documentation","text":"<p>This project uses Mkdocs with material theme for documentation.</p> <p>You can test documentation generation with next command</p> <pre><code>make check docs-test\n</code></pre> <p>In order to generate and serve documentation on local, you can use the next command</p> <pre><code>make check docs\n</code></pre> <p>Production's documentation is serve from an action on project's github repository</p>"},{"location":"INSTALL/","title":"Installation","text":""},{"location":"INSTALL/#prerequisite","title":"Prerequisite","text":"<p>This project use: </p> <ul> <li>git, for versionning</li> <li>Poetry, to manage python environment and package dependencies,  and much more. </li> <li>Nodejs, npm to manage assets</li> </ul>"},{"location":"INSTALL/#installation_1","title":"Installation","text":"<p>This application use Django's framework. Please get closer to the documentation for the handling of this project.</p>"},{"location":"INSTALL/#for-test-purpose","title":"For test purpose","text":""},{"location":"INSTALL/#clone","title":"Clone","text":"<p>Clone the repository locally</p> <pre><code>$ git clone https://github.com/DelphineLemire/documentary-watch.git\n</code></pre>"},{"location":"INSTALL/#install-virtual-environment","title":"Install virtual environment","text":"<p>Activate virtual environment</p> <pre><code>$ poetry shell\n</code></pre> <p>Install package dependencies</p> <pre><code>$ poetry install\n</code></pre> <p>note: this command not install documentation</p>"},{"location":"INSTALL/#manage-environment-variables","title":"Manage Environment variables","text":"<p>In order for the application to work, environment variables must be defined. </p> <p>This project uses the package environ to manage environment variables.  For this environ uses the .env file at the root of the project.  You can update this file with your own data. </p> <p>So that environ takes into account this file you must add the environment variable DJANGO_READ_DOT_ENV_FILE=True by a traditional method or thanks to pyenv</p>"},{"location":"INSTALL/#populate-database","title":"Populate database","text":"<pre><code>$ python manage.py migrate\n</code></pre>"},{"location":"INSTALL/#create-superuser","title":"Create superuser","text":"<pre><code>$ python manage.py createsuperuser\n</code></pre> <p>Answer questions</p>"},{"location":"INSTALL/#manage-assets","title":"Manage Assets","text":"<p>Push js file into static/js directory</p> <pre><code>$ npm run babel \n</code></pre> <p>Push and watch stylesheet file into static/css directory</p> <pre><code>$ npm run sass\n</code></pre>"},{"location":"INSTALL/#launch-the-application-locally","title":"Launch the application locally","text":"<pre><code>$ python manage.py runserver\n</code></pre> <p>Warning: this way of launching the application is reserved only for demo use or for  the development of the application.</p>"},{"location":"MODELS/","title":"Models","text":""},{"location":"MODELS/#users.models.User","title":"<code>User</code>","text":"<p>             Bases: <code>AbstractUser</code></p> <p>Default custom users model for Documentary-watch.</p> Source code in <code>users/models.py</code> <pre><code>class User(AbstractUser):\n\"\"\"\n       Default custom users model for Documentary-watch.\n       \"\"\"\n    pass\n</code></pre>"},{"location":"MODELS/#contributors.models.Contributor","title":"<code>Contributor</code>","text":"<p>             Bases: <code>Model</code></p> <p>Contributor who shares information.</p> <p>Not to be confused with app users.</p> Source code in <code>contributors/models.py</code> <pre><code>class Contributor(Model):\n\"\"\"\n        Contributor who shares information.\n\n        Not to be confused with app users.\n\n        \"\"\"\n    first_name = CharField(_(\"First Name\"), blank=True, max_length=50)\n    last_name = CharField(_(\"Last Name\"), blank=True, max_length=50)\n    distinction = CharField(_(\"Distinction\"), blank=True, max_length=50)\n    note = TextField(_(\"description\"), blank=True, max_length=500)\n\n    def __str__(self) -&gt; str:\n        return f\"{self.first_name}, {self.last_name}: {self.distinction}\"\n\n    class Meta:\n        verbose_name = _('Contributor')\n        verbose_name_plural = _('Contributors')\n</code></pre>"},{"location":"MODELS/#contributions.models.Contribution","title":"<code>Contribution</code>","text":"<p>             Bases: <code>Model</code></p> <p>Topic followed.</p> Source code in <code>contributions/models.py</code> <pre><code>class Contribution(Model):\n\"\"\"\n        Topic followed.\n\n        \"\"\"\n    resume = CharField(_(\"resume\"), max_length=255)\n    contributor = ForeignKey(Contributor,\n                             related_query_name='contributor',\n                             null=True,\n                             blank=True,\n                             related_name=\"contributions\",\n                             on_delete=CASCADE)\n\n    url = CharField(_(\"url\"), max_length=255)\n    topic = ForeignKey(Topic,\n                       related_query_name='topic',\n                       null=True,\n                       blank=True,\n                       related_name=\"contributions\",\n                       on_delete=CASCADE)\n\n    def __str__(self):\n        return f\"{self.contributor}/{self.resume}\"\n\n    class Meta:\n        verbose_name = _('Contribution')\n        verbose_name_plural = _('Contributions')\n</code></pre>"},{"location":"MODELS/#contributions.models.Topic","title":"<code>Topic</code>","text":"<p>             Bases: <code>Model</code></p> <p>Topic followed.</p> Source code in <code>contributions/models.py</code> <pre><code>class Topic(Model):\n\"\"\"\n        Topic followed.\n\n        \"\"\"\n    label = CharField(_(\"Label\"), max_length=255)\n    description = TextField(_(\"description\"),\n                            null=True,\n                            blank=True,\n                            max_length=255)\n    theme = ForeignKey(Theme,\n                       related_query_name='theme',\n                       null=True,\n                       blank=True,\n                       related_name=\"topics\",\n                       on_delete=CASCADE)\n\n    def __str__(self):\n        return f\"{self.label}\"\n\n    class Meta:\n        verbose_name = _('Topic')\n        verbose_name_plural = _('Topics')\n</code></pre>"},{"location":"MODELS/#various.models.Theme","title":"<code>Theme</code>","text":"<p>             Bases: <code>Model</code></p> <p>Theme of the topics followed.</p> Source code in <code>various/models.py</code> <pre><code>class Theme(Model):\n\"\"\"\n        Theme of the topics followed.\n\n        \"\"\"\n    label = CharField(_(\"Label\"), max_length=255)\n\n    def __str__(self):\n        return f\"{self.label}\"\n\n    class Meta:\n        verbose_name = _('Theme')\n        verbose_name_plural = _('Themes')\n</code></pre>"},{"location":"USECASE/","title":"Usecase's List","text":""},{"location":"USECASE/#first-the-needs-of-the-application-administrator","title":"First, the needs of the application administrator","text":"<p>As an application administrator, I want to be able to quickly manage information in order to have an overview of this information and memorize secondary information.</p> <ul> <li>[X] As an admin, I can manage contributor; e.g. post's author, person interviewed in a podcast.</li> <li>[X] As an admin, I can manage theme; e.g.  Finance, Human Resource, Information Technology</li> <li>[X] As an admin, I can manage topic per theme; e.g. invoices in digital format</li> <li>[] As an Admin, I Manage contribution per contact, on a theme</li> </ul>"},{"location":"USECASE/#dans-un-deuxieme-temps-je-repondrai-aux-besoins-des-internautes","title":"Dans un deuxi\u00e8me temps, je r\u00e9pondrai aux besoins des internautes","text":"<ul> <li>[] As a user, I can display the topics of a theme in order to have an overview of the topic likely  to be an opportunity. </li> <li>[] As a user, I can add a topic to follow in order to be up to date on the news</li> <li>[] As a user, I can add a  contribution</li> <li>[] As a user, I can look a contributor's contributions per topics</li> </ul>"}]}